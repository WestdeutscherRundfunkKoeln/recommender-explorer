name: Build, Publish and Deploy Workflow
on:
  workflow_call:
    inputs:
      service-name:
        required: true
        type: string
        description: Name of the service
      stages_for_main:
        required: false
        type: string
        description: 'Stage for deployment when triggered by main branch (Default: [prod-wdr, prod-atmt])'
      stages_for_dev:
        required: false
        type: string
        description: 'Stage for deployment when triggered by dev branch (Default: [dev-all])'

jobs:
  build_publish_deploy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        stage: ${{ 
          fromJson(
            github.ref == 'refs/heads/main' && 
            (inputs.stages_for_main || '["prod-wdr", "prod-atmt"]') || 
            github.ref == 'refs/heads/dev' && 
            (inputs.stages_for_dev || '["dev-all"]')
          ) 
          }}
    steps:
      - name: Set stage environment variable
        run: |
          echo "STAGE=${{ matrix.stage }}" >> $GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@v4
  
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
        
      - name: Extract short SHA
        run: |
          shortSha=$(git rev-parse --short ${{ github.sha }})
          echo "COMMIT_SHORT_SHA=$shortSha" >> $GITHUB_ENV

      - name: Downcase Repository
        run: echo "REPO_LOWER=${GITHUB_REPOSITORY,,}" >> $GITHUB_ENV

      - name: Configure image tags
        run: |
          TAG_COMMIT=$(echo "ghcr.io/${{ env.REPO_LOWER }}:${{ env.STAGE }}-${{ inputs.service-name }}-${{ env.COMMIT_SHORT_SHA }}")
          echo "TAG_COMMIT=$TAG_COMMIT" >> $GITHUB_ENV
          TAG_LATEST=$(echo "ghcr.io/${{ env.REPO_LOWER }}:${{ env.STAGE }}-${{ inputs.service-name }}-latest")
          echo "TAG_LATEST=$TAG_LATEST" >> $GITHUB_ENV

      - name: Build and push docker image
        uses: docker/build-push-action@v2
        with:
          context: ./microservices/${{ inputs.service-name }}service
          file: ./microservices/${{ inputs.service-name }}service/docker/Dockerfile
          push: true
          tags: |
            ${{ env.TAG_COMMIT }}
            ${{ env.TAG_LATEST }}
  
      - name: Configure ECS params
        run: |
          STAGE_UPPER=$(echo "${{ env.STAGE }}" | tr '[:lower:]' '[:upper:]')
          ECS_SERVICE=$(echo "$STAGE_UPPER-${{ secrets.MS_PREFIX }}-${{ inputs.service-name }}")
          echo "ECS_SERVICE=$ECS_SERVICE" >> $GITHUB_ENV
          ECS_CONTAINER=$(echo "${{ secrets.MS_PREFIX }}-${{ inputs.service-name }}")
          echo "ECS_CONTAINER=$ECS_CONTAINER" >> $GITHUB_ENV
    
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
  
      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ env.ECS_SERVICE }} --region ${{ secrets.AWS_REGION }} --query 'taskDefinition' > task-definition.json
      
      - name: Render new task definition
        id: render-task-definition
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ./task-definition.json
          container-name: ${{ env.ECS_CONTAINER }}
          image: ${{ env.TAG_COMMIT }}
  
      - name: Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ secrets.ECS_CLUSTER }}
          task-definition: ${{ steps.render-task-definition.outputs.task-definition }}
          wait-for-service-stability: true
